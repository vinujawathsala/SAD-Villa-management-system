/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;
import model.MySQL;

/**
 *
 * @author TUF_Heat_
 */
public class Meeting extends javax.swing.JPanel {

    private Home home;
    private Vector vector = new Vector();
    HashMap<String, String> departmentMap = new HashMap<>();

    /**
     * Creates new form Meetings
     */
    public Meeting(Home home) {
        initComponents();
        this.home = home;
        loadDepartments();
        loadPickers();
        loadMeetings();
    }

    private void loadPickers() {
        timePicker1.set24HourView(true);
        timePicker1.setOrientation(SwingConstants.HORIZONTAL);
        timePicker1.setEditor(jFormattedTextField2);
        datePicker1.setEditor(jFormattedTextField1);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        timePicker1 = new raven.datetime.component.time.TimePicker();
        datePicker1 = new raven.datetime.component.date.DatePicker();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        jFormattedTextField2 = new javax.swing.JFormattedTextField();
        jButton5 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel6 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(1000, 500));
        setLayout(new java.awt.BorderLayout());

        jPanel3.setPreferredSize(new java.awt.Dimension(1000, 50));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/close.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Imprint MT Shadow", 1, 18)); // NOI18N
        jLabel1.setText("Meetings");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 869, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jButton1))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        add(jPanel3, java.awt.BorderLayout.PAGE_START);

        jPanel1.setPreferredSize(new java.awt.Dimension(200, 500));

        jLabel2.setFont(new java.awt.Font("Centaur", 0, 14)); // NOI18N
        jLabel2.setText("Meeting Name");

        jLabel3.setFont(new java.awt.Font("Centaur", 0, 14)); // NOI18N
        jLabel3.setText("Meeting Date");

        jLabel4.setFont(new java.awt.Font("Centaur", 0, 14)); // NOI18N
        jLabel4.setText("Meeting Time");

        jLabel5.setFont(new java.awt.Font("Centaur", 0, 14)); // NOI18N
        jLabel5.setText("Position");

        jButton2.setFont(new java.awt.Font("Microsoft Uighur", 1, 18)); // NOI18N
        jButton2.setText("Shedule Meeting");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Microsoft Uighur", 1, 18)); // NOI18N
        jButton3.setText("Update Meeting");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Microsoft Uighur", 1, 18)); // NOI18N
        jButton4.setText("Remove Meeting");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jFormattedTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFormattedTextField1ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Microsoft Uighur", 1, 18)); // NOI18N
        jButton5.setText("Select");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(jList1);

        jLabel6.setFont(new java.awt.Font("Centaur", 0, 14)); // NOI18N
        jLabel6.setText("Department");

        jComboBox1.setFont(new java.awt.Font("Centaur", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jFormattedTextField1)
                    .addComponent(jFormattedTextField2)
                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jFormattedTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4)
                .addContainerGap())
        );

        add(jPanel1, java.awt.BorderLayout.LINE_START);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Date", "Time", "Position", "Department"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
        }

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        add(jPanel2, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.home.removePanel();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String name = jTextField1.getText();
        String date = LocalDate.parse(jFormattedTextField1.getText(), DateTimeFormatter.ofPattern("dd/MM/yyyy")).format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        String time = jFormattedTextField2.getText();

        String department = departmentMap.get(jComboBox1.getSelectedItem().toString());

        if (jTextField1.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please type a Meeting Name", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (datePicker1.getSelectedDate() == null) {
            JOptionPane.showMessageDialog(this, "Plese select a Date", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (timePicker1.getSelectedTime() == null) {
            JOptionPane.showMessageDialog(this, "Plese select a Time", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (jList1.getModel().getSize() == 0) {
            JOptionPane.showMessageDialog(this, "Please select least one participant", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            try {

                MySQL.executeIUD("INSERT INTO `meetings` (`meeting_name`, `meeting_date`, `meeting_time`, department_id) "
                        + "VALUES('" + name + "', '" + date + "', '" + time + "', '" + department + "');");

                ResultSet resultSet = MySQL.executeSearch("SELECT `meeting_id` FROM `meetings` WHERE `meeting_name` = '" + name + "' AND `meeting_date` = '" + date + "' AND `meeting_time` = '" + time + "'");
                resultSet.next();
                String meeting_id = resultSet.getString("meeting_id");

                for (int i = 0; i < jList1.getModel().getSize(); i++) {
                    ResultSet position_id = MySQL.executeSearch("SELECT `position_id` FROM `position` WHERE `position_name` = '" + jList1.getModel().getElementAt(i) + "'");
                    position_id.next();
                    MySQL.executeIUD("INSERT INTO `meetings_position` (`meeting_id`,`position_id`) VALUES('" + meeting_id + "', '" + position_id.getString("position_id") + "')");
                }

                loadMeetings();
                reset();

            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jFormattedTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFormattedTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFormattedTextField1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        this.home.setData(vector);
        new SelectParticipants(this.home, true).setVisible(true);
        if (this.home.getData() != null) {
            jList1.setListData(this.home.getData());
            this.home.setData(new Vector(0));
        }

    }//GEN-LAST:event_jButton5ActionPerformed
  
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (jTable1.getSelectedRow() != -1 && evt.getClickCount() == 2) {
            jTextField1.setText(String.valueOf(jTable1.getValueAt(jTable1.getSelectedRow(), 0)));
            datePicker1.setSelectedDate(LocalDate.parse(jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString()));
            timePicker1.setSelectedTime(LocalTime.parse(String.valueOf(jTable1.getValueAt(jTable1.getSelectedRow(), 2))));
            vector.add(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString());
            jList1.setListData(vector);
            jComboBox1.setSelectedItem(jTable1.getValueAt(jTable1.getSelectedRow(), 4));

            

        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        String name = jTextField1.getText();
        String date = LocalDate.parse(jFormattedTextField1.getText(), DateTimeFormatter.ofPattern("dd/MM/yyyy")).format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        String time = jFormattedTextField2.getText();

        String department = departmentMap.get(jComboBox1.getSelectedItem().toString());

        if (jTextField1.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please type a Meeting Name", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (datePicker1.getSelectedDate() == null) {
            JOptionPane.showMessageDialog(this, "Plese select a Date", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (timePicker1.getSelectedTime() == null) {
            JOptionPane.showMessageDialog(this, "Plese select a Time", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (jList1.getModel().getSize() == 0) {
            JOptionPane.showMessageDialog(this, "Please select least one participant", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            try {
                
                
                ResultSet meet_id = MySQL.executeSearch("SELECT `meeting_id` FROM `meetings` WHERE `meeting_name` = '" + String.valueOf(jTable1.getValueAt(jTable1.getSelectedRow(), 0)) + "' "
                        + "AND `meeting_date` = '" + String.valueOf(jTable1.getValueAt(jTable1.getSelectedRow(), 1)) + "' AND `meeting_time` = '" + String.valueOf(jTable1.getValueAt(jTable1.getSelectedRow(), 2)) + "'");
                meet_id.next();

                MySQL.executeIUD("UPDATE `meetings` SET `meeting_name` = '" + name + "', `meeting_date` = '" + date + "', `meeting_time` = '" + time + "', `department_id` = '" + department + "' "
                        + "WHERE `meeting_id` = '" + meet_id.getString("meeting_id") + "'");

                for (int i = 0; i < jList1.getModel().getSize(); i++) {
                    ResultSet position_id = MySQL.executeSearch("SELECT `position_id` FROM `position` WHERE `position_name` = '" + jList1.getModel().getElementAt(i) + "'");
                    position_id.next();
                    MySQL.executeIUD("UPDATE `meetings_position` SET `position_id` = '" + position_id.getString("position_id") + "' WHERE `meeting_id` = '" + meet_id.getString("meeting_id") + "'");

                }

                loadMeetings();
                reset();

            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        int option = JOptionPane.showConfirmDialog(this, "Your Going to delete this meeting, are you sure?", "confirm Deletion", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

        if (option == JOptionPane.YES_OPTION) {

            try {
                ResultSet meet_id = MySQL.executeSearch("SELECT `meeting_id` FROM `meetings` WHERE `meeting_name` = '" + String.valueOf(jTable1.getValueAt(jTable1.getSelectedRow(), 0)) + "' "
                        + "AND `meeting_date` = '" + String.valueOf(jTable1.getValueAt(jTable1.getSelectedRow(), 1)) + "' AND `meeting_time` = '" + String.valueOf(jTable1.getValueAt(jTable1.getSelectedRow(), 2)) + "'");
                meet_id.next();
                
                MySQL.executeIUD("DELETE FROM `meetings_position` WHERE `meeting_id` = '" + meet_id.getString("meeting_id") + "'");
                MySQL.executeIUD("DELETE FROM `meetings` WHERE `meeting_id` = '" + meet_id.getString("meeting_id") + "'");
            } catch (Exception e) {
                e.printStackTrace();
            }
            loadMeetings();
            reset();
        }


    }//GEN-LAST:event_jButton4ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private raven.datetime.component.date.DatePicker datePicker1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JFormattedTextField jFormattedTextField2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private raven.datetime.component.time.TimePicker timePicker1;
    // End of variables declaration//GEN-END:variables

    private void loadDepartments() {
        try {
            Vector<String> vector = new Vector<>();
            vector.add("Select");

            ResultSet resultSet = MySQL.executeSearch("SELECT * FROM `department`");

            while (resultSet.next()) {
                vector.add(resultSet.getString("department_name"));
                departmentMap.put(resultSet.getString("department_name"), resultSet.getString("department_id"));
            }
            jComboBox1.setModel(new DefaultComboBoxModel<>(vector));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void reset() {
        jTextField1.setText("");
        jFormattedTextField1.setText("");
        jFormattedTextField2.setText("");
        jComboBox1.setSelectedIndex(0);
        jList1.setModel(new DefaultListModel<>());
    }

    private void loadMeetings() {
        try {
            ResultSet meeting = MySQL.executeSearch("SELECT * FROM `meetings` INNER JOIN `meetings_position` ON `meetings`.meeting_id = `meetings_position`.meeting_id "
                    + "INNER JOIN `position` ON `meetings_position`.position_id = `position`.position_id "
                    + "INNER JOIN `department` ON `meetings`.department_id = `department`.department_id");

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);

            while (meeting.next()) {
                Vector<String> meet = new Vector<>();
                meet.add(meeting.getString("meeting_name"));
                meet.add(meeting.getString("meeting_date"));
                meet.add(meeting.getString("meeting_time"));
                meet.add(meeting.getString("position_name"));
                meet.add(meeting.getString("department_name"));

                model.addRow(meet);

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
