/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import GUI.FrontOffice.FrontOffice;
import GUI.HousekeepingOffice.HousekeepingOffice;
import GUI.MaintainerOffice.MaintainerOffice;
import GUI.Resturent.RestunrantOffice;
import java.sql.ResultSet;
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import model.MySQL;

/**
 *
 * @author TUF_Heat_
 */
public class TrainingProgram extends javax.swing.JPanel {

    private Home home;
    private FrontOffice frontOffice;
    private RestunrantOffice restunrantOffice;
    private HousekeepingOffice housekeepingOffice;
    private MaintainerOffice maintainerOffice;

    /**
     * Creates new form TrainingProgram
     */
    public TrainingProgram(JFrame jFrame) {
        initComponents();
        if (jFrame.getClass().getName().endsWith("Home")) {
            this.home = (Home) jFrame;
        } else if (jFrame.getClass().getName().endsWith("FrontOffice")) {
            this.frontOffice = (FrontOffice) jFrame;
        } else if (jFrame.getClass().getName().endsWith("RestunrantOffice")) {
            this.restunrantOffice = (RestunrantOffice) jFrame;
        } else if (jFrame.getClass().getName().endsWith("HousekeepingOffice")) {
            this.housekeepingOffice = (HousekeepingOffice) jFrame;
        } else if (jFrame.getClass().getName().endsWith("MaintainerOffice")) {
            this.maintainerOffice = (MaintainerOffice) jFrame;
        }
        loadPrograms("today");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JToggleButton();

        setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.BorderLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Program", "Start Date", "Start Time", "End Date", "End Time", "Department", "Position"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel3.setPreferredSize(new java.awt.Dimension(1000, 50));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/close.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Imprint MT Shadow", 1, 24)); // NOI18N
        jLabel1.setText("Training Program");

        jToggleButton1.setFont(new java.awt.Font("Microsoft Uighur", 1, 18)); // NOI18N
        jToggleButton1.setText("Today");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 594, Short.MAX_VALUE)
                .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jToggleButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        add(jPanel3, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (home != null) {
            this.home.removePanel();
        } else if (frontOffice != null) {
            this.frontOffice.removePanel();
        } else if (restunrantOffice != null) {
            this.restunrantOffice.removePanel();
        } else if (housekeepingOffice != null) {
            this.housekeepingOffice.removePanel();
        } else if (maintainerOffice != null) {
            this.maintainerOffice.removePanel();
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // TODO add your handling code here:
        if (jToggleButton1.isSelected()) {
            jToggleButton1.setText("This Month");
            loadPrograms("month");
        } else {
            jToggleButton1.setText("Today");
            loadPrograms("today");
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables

    private void loadPrograms(String date) {
        if (date.equals("today")) {
            try {
                ResultSet resultSet = MySQL.executeSearch("SELECT *,DATE(`start_date_time`) AS `s_date`, TIME(`start_date_time`) AS `s_time`, DATE(`end_date_time`) AS `e_date`, TIME(`end_date_time`) AS `e_time` FROM `training_program` "
                        + "INNER JOIN `position` ON `training_program`.position_id = `position`.position_id "
                        + "INNER JOIN `department` ON `department`.department_id = `position`.department_id "
                        + "WHERE DATE(`start_date_time`) = DATE(CURDATE())");

                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.setRowCount(0);

                while (resultSet.next()) {
                    Vector<String> vector = new Vector<>();
                    vector.add(resultSet.getString("program_name"));
                    vector.add(resultSet.getString("s_date"));
                    vector.add(resultSet.getString("s_time"));
                    vector.add(resultSet.getString("e_date"));
                    vector.add(resultSet.getString("e_time"));
                    vector.add(resultSet.getString("department_name"));
                    vector.add(resultSet.getString("position_name"));

                    model.addRow(vector);

                }

            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (date.equals("month")) {
            try {
            ResultSet resultSet = MySQL.executeSearch("SELECT *,DATE(`start_date_time`) AS `s_date`, TIME(`start_date_time`) AS `s_time`, DATE(`end_date_time`) AS `e_date`, TIME(`end_date_time`) AS `e_time` FROM `training_program` "
                    + "INNER JOIN `position` ON `training_program`.position_id = `position`.position_id "
                    + "INNER JOIN `department` ON `department`.department_id = `position`.department_id "
                    + "WHERE YEAR(`start_date_time`) = YEAR(CURDATE()) AND MONTH(`start_date_time`) = MONTH(CURDATE())");

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);

            while (resultSet.next()) {
                Vector<String> vector = new Vector<>();
                vector.add(resultSet.getString("program_name"));
                vector.add(resultSet.getString("s_date"));
                vector.add(resultSet.getString("s_time"));
                vector.add(resultSet.getString("e_date"));
                vector.add(resultSet.getString("e_time"));
                vector.add(resultSet.getString("department_name"));
                vector.add(resultSet.getString("position_name"));

                model.addRow(vector);

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        }
    }
}
